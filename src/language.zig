//! Wrapper around the TSLanguage structure.

const api = @import("api/out.zig");
const Symbol = @import("symbol.zig").Symbol;

pub const TSLanguage = *api.TSLanguage;

/// Language struct, equivalent of `TSLanguage` struct.
pub const Language = struct {
    /// `TSLanguage` struct instance
    language: *api.TSLanguage,

    pub fn from(language: TSLanguage) Language {
        return .{
            .language = language,
        };
    }

    /// Get the version number for this language. This version number is used to ensure
    /// that language was generated by a compatible version of Tree-Sitter.
    pub fn version(self: Language) u32 {
        return api.ts_language_version(self.language);
    }

    /// Get the number of distinct node types in the language.
    pub fn symbol_count(self: Language) u32 {
        return api.ts_language_symbol_count(self.language);
    }

    /// Get a node type string for the given numerical id.
    pub fn symbol_name(self: Language, symbol: Symbol) []const u8 {
        return api.ts_language_symbol_name(self.language, symbol.symbol);
    }

    /// Get the numerical id for the given node type string.
    pub fn symbol_for_name(self: Language, str: []const u8, is_named: bool) Symbol {
        return Symbol.init(api.ts_language_symbol_for_name(self.language, str, str.len, is_named));
    }

    pub fn field_count(self: Language) u32 {
        return api.ts_language_field_count(self.language);
    }
};
